
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://cvcebcisijjmmmwuedcv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN2Y2ViY2lzaWpqbW1td3VlZGN2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxNTE5MTEsImV4cCI6MjA2MjcyNzkxMX0.ajg0CHVdVC6QenC9CVDN_5vikA6-JoUxXeX3yz64AUE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Detect if localStorage is available (may not be in some mobile browsers)
const isLocalStorageAvailable = () => {
  try {
    const test = '__test__';
    localStorage.setItem(test, test);
    localStorage.removeItem(test);
    return true;
  } catch (e) {
    return false;
  }
};

// Create a more resilient storage fallback
const storageAdapter = isLocalStorageAvailable() 
  ? localStorage 
  : {
      getItem: (key: string) => {
        console.log('Using fallback storage for get:', key);
        return sessionStorage.getItem(key) || null;
      },
      setItem: (key: string, value: string) => {
        console.log('Using fallback storage for set:', key);
        try {
          sessionStorage.setItem(key, value);
        } catch (e) {
          console.error('Storage error:', e);
        }
      },
      removeItem: (key: string) => {
        console.log('Using fallback storage for remove:', key);
        sessionStorage.removeItem(key);
      }
    };

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: storageAdapter,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce', // Better for mobile browsers
  }
});
