
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://cvcebcisijjmmmwuedcv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImN2Y2ViY2lzaWpqbW1td3VlZGN2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxNTE5MTEsImV4cCI6MjA2MjcyNzkxMX0.ajg0CHVdVC6QenC9CVDN_5vikA6-JoUxXeX3yz64AUE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Detect mobile device
const isMobile = typeof navigator !== 'undefined' && /iPhone|iPad|iPod|Android|webOS|BlackBerry|Windows Phone/i.test(navigator.userAgent);

// Create a resilient storage system with multiple fallbacks
const createResilientStorage = () => {
  const storage = {
    getItem: (key: string): string | null => {
      try {
        // Try localStorage first
        if (typeof localStorage !== 'undefined') {
          return localStorage.getItem(key);
        }
      } catch (e) {
        console.warn('localStorage access failed:', e);
      }
      
      try {
        // Try sessionStorage as fallback
        if (typeof sessionStorage !== 'undefined') {
          return sessionStorage.getItem(key);
        }
      } catch (e) {
        console.warn('sessionStorage access failed:', e);
      }
      
      // Memory fallback (for current session only)
      try {
        if (typeof window !== 'undefined' && (window as any).__memoryStorage) {
          return (window as any).__memoryStorage[key] || null;
        }
      } catch (e) {}
      
      return null;
    },
    
    setItem: (key: string, value: string): void => {
      let stored = false;
      
      try {
        // Try localStorage first
        if (typeof localStorage !== 'undefined') {
          localStorage.setItem(key, value);
          stored = true;
        }
      } catch (e) {
        console.warn('localStorage set failed:', e);
      }
      
      if (!stored) {
        try {
          // Try sessionStorage as fallback
          if (typeof sessionStorage !== 'undefined') {
            sessionStorage.setItem(key, value);
            stored = true;
          }
        } catch (e) {
          console.warn('sessionStorage set failed:', e);
        }
      }
      
      // Memory fallback (for current session only)
      if (!stored && typeof window !== 'undefined') {
        if (!(window as any).__memoryStorage) {
          (window as any).__memoryStorage = {};
        }
        (window as any).__memoryStorage[key] = value;
      }
    },
    
    removeItem: (key: string): void => {
      try {
        if (typeof localStorage !== 'undefined') {
          localStorage.removeItem(key);
        }
      } catch (e) {}
      
      try {
        if (typeof sessionStorage !== 'undefined') {
          sessionStorage.removeItem(key);
        }
      } catch (e) {}
      
      // Memory fallback cleanup
      try {
        if (typeof window !== 'undefined' && (window as any).__memoryStorage) {
          delete (window as any).__memoryStorage[key];
        }
      } catch (e) {}
    }
  };
  
  return storage;
};

// Use our resilient storage adapter
const storageAdapter = createResilientStorage();

// Create and export the Supabase client with mobile-friendly config
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: storageAdapter,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce', // Better for mobile browsers
    debug: isMobile // Enable debug mode on mobile to catch more issues
  },
  global: {
    headers: {
      'x-client-info': `mobile-${isMobile ? 'true' : 'false'}`
    }
  },
  // Better for mobile connections
  realtime: {
    params: {
      eventsPerSecond: 5
    }
  }
});

// Export mobile detection helper
export const isMobileClient = isMobile;
