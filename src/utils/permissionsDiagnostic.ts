
import { supabase } from '@/integrations/supabase/client';

export const diagnosePer missions = async (userEmail: string) => {
  console.log('üîç DIAGNOSTIC PERMISSIONS pour:', userEmail);
  
  try {
    // 1. R√©cup√©rer les infos de l'utilisateur
    const { data: userProfile } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', userEmail)
      .single();
    
    if (!userProfile) {
      console.log('‚ùå Utilisateur introuvable');
      return;
    }
    
    console.log('üë§ Profil utilisateur:', userProfile);
    
    // 2. V√©rifier l'appartenance aux groupes
    const { data: groupMemberships } = await supabase
      .from('group_members')
      .select(`
        *,
        invitation_groups(*)
      `)
      .eq('user_id', userProfile.id);
    
    console.log('üë• Appartenances aux groupes:', groupMemberships);
    
    // 3. V√©rifier les invitations
    const { data: invitations } = await supabase
      .from('invitations')
      .select('*')
      .eq('email', userEmail);
    
    console.log('üíå Invitations:', invitations);
    
    // 4. V√©rifier les albums accessibles
    const { data: albums } = await supabase
      .from('blog_albums')
      .select(`
        *,
        profiles(email, display_name)
      `);
    
    console.log('üìö Albums trouv√©s via RLS:', albums);
    
    // 5. V√©rifier les posts accessibles
    const { data: posts } = await supabase
      .from('blog_posts')
      .select(`
        *,
        profiles(email, display_name)
      `);
    
    console.log('üìù Posts trouv√©s via RLS:', posts);
    
    // 6. V√©rifier les entr√©es de journal accessibles
    const { data: diaryEntries } = await supabase
      .from('diary_entries')
      .select('*');
    
    console.log('üìî Entr√©es de journal trouv√©es via RLS:', diaryEntries);
    
    return {
      userProfile,
      groupMemberships,
      invitations,
      albums,
      posts,
      diaryEntries
    };
    
  } catch (error) {
    console.error('üí• Erreur lors du diagnostic:', error);
  }
};

export const syncUserPermissions = async (userEmail: string) => {
  console.log('üîß SYNCHRONISATION PERMISSIONS pour:', userEmail);
  
  try {
    // R√©cup√©rer l'ID utilisateur
    const { data: userProfile } = await supabase
      .from('profiles')
      .select('id')
      .eq('email', userEmail)
      .single();
    
    if (!userProfile) {
      console.log('‚ùå Utilisateur introuvable');
      return;
    }
    
    // Appeler la fonction Edge de synchronisation cibl√©e
    const { data, error } = await supabase.functions.invoke('sync-invitation-permissions', {
      body: { targetUserId: userProfile.id }
    });
    
    if (error) {
      console.error('‚ùå Erreur lors de la synchronisation:', error);
      return;
    }
    
    console.log('‚úÖ Synchronisation r√©ussie:', data);
    return data;
    
  } catch (error) {
    console.error('üí• Erreur lors de la synchronisation:', error);
  }
};
