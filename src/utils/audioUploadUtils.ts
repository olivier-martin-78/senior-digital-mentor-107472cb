import { supabase } from '@/integrations/supabase/client';

// Nom du bucket Supabase pour stocker les fichiers audio
export const AUDIO_BUCKET_NAME = 'life-story-audios';

/**
 * V√©rifie si le bucket existe et est accessible
 * @returns {Promise<boolean>} Indique si le bucket est accessible
 */
export const checkBucketAccess = async (): Promise<boolean> => {
  try {
    console.log(`ü™£ V√©rification de l'acc√®s au bucket ${AUDIO_BUCKET_NAME}...`);
    
    const { data, error } = await supabase.storage
      .from(AUDIO_BUCKET_NAME)
      .list('', { limit: 1 });
    
    if (error) {
      console.error(`‚ùå Erreur d'acc√®s au bucket ${AUDIO_BUCKET_NAME}:`, error);
      return false;
    }
    
    console.log(`‚úÖ Acc√®s au bucket ${AUDIO_BUCKET_NAME} r√©ussi.`);
    return true;
  } catch (error) {
    console.error(`üí• Exception lors de la v√©rification du bucket ${AUDIO_BUCKET_NAME}:`, error);
    return false;
  }
};

/**
 * G√©n√®re une URL sign√©e pour acc√©der au fichier audio
 * @param filePath Chemin du fichier dans le bucket
 * @returns URL sign√©e ou null en cas d'erreur
 */
export const getSignedAudioUrl = async (filePath: string): Promise<string | null> => {
  try {
    console.log('üîó G√©n√©ration URL sign√©e pour:', filePath);
    
    const { data, error } = await supabase.storage
      .from(AUDIO_BUCKET_NAME)
      .createSignedUrl(filePath, 3600); // URL valide pendant 1 heure
    
    if (error) {
      console.error('‚ùå Erreur cr√©ation URL sign√©e:', error);
      return null;
    }
    
    console.log('‚úÖ URL sign√©e g√©n√©r√©e:', data.signedUrl);
    return data.signedUrl;
  } catch (error) {
    console.error('üí• Exception lors de la cr√©ation de l\'URL sign√©e:', error);
    return null;
  }
};

/**
 * Extraire le chemin du fichier √† partir d'une URL
 * @param url URL compl√®te du fichier
 * @returns Chemin du fichier dans le bucket
 */
export const extractFilePathFromUrl = (url: string): string | null => {
  try {
    console.log('üîç Extraction du chemin depuis URL:', url);
    
    // Pattern am√©lior√© pour les URLs publiques Supabase
    const patterns = [
      // Pattern pour URLs publiques: /storage/v1/object/public/bucket-name/path
      new RegExp(`/storage/v1/object/public/${AUDIO_BUCKET_NAME}/(.+)$`),
      // Pattern pour URLs sign√©es: /storage/v1/object/sign/bucket-name/path
      new RegExp(`/storage/v1/object/sign/${AUDIO_BUCKET_NAME}/(.+)\\?`),
      // Pattern simple pour bucket dans l'URL
      new RegExp(`/${AUDIO_BUCKET_NAME}/(.+)$`)
    ];
    
    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match && match[1]) {
        const extractedPath = decodeURIComponent(match[1]);
        console.log('‚úÖ Chemin extrait:', extractedPath);
        return extractedPath;
      }
    }
    
    console.warn('‚ùå Aucun pattern reconnu pour URL:', url);
    return null;
  } catch (error) {
    console.error('üí• Erreur extraction chemin:', error);
    return null;
  }
};

/**
 * Assurez-vous que toutes les fonctions de callback sont appel√©es m√™me en cas d'erreur
 */
const safeCallback = (callback: Function, ...args: any[]) => {
  try {
    callback(...args);
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ex√©cution du callback:", error);
  }
};

/**
 * T√©l√©charge un fichier audio vers Supabase Storage
 */
export const uploadAudio = async (
  blob: Blob, 
  userId: string, 
  chapterId: string, 
  questionId: string,
  onSuccess: (url: string) => void,
  onError: (message: string) => void,
  onUploadStart: () => void,
  onUploadEnd: () => void
): Promise<void> => {
  // Validation des param√®tres
  if (!blob || blob.size === 0) {
    console.log(`‚ùå Blob invalide pour ${questionId}:`, { hasBlob: !!blob, size: blob?.size });
    safeCallback(onError, "Aucun enregistrement audio valide √† t√©l√©charger");
    safeCallback(onUploadEnd);
    return;
  }
  
  if (!userId) {
    console.log(`‚ùå UserId manquant pour ${questionId}`);
    safeCallback(onError, "Identifiant utilisateur manquant");
    safeCallback(onUploadEnd);
    return;
  }
  
  safeCallback(onUploadStart);
  console.log(`üì§ D√©but du t√©l√©chargement audio pour la question ${questionId}...`, {
    blobSize: blob.size,
    blobType: blob.type,
    userId,
    chapterId
  });
  
  try {
    // V√©rification de l'acc√®s au bucket
    const bucketAccessible = await checkBucketAccess();
    if (!bucketAccessible) {
      throw new Error(`Impossible d'acc√©der au service de stockage (bucket: ${AUDIO_BUCKET_NAME})`);
    }
    
    // Cr√©ation d'un nom de fichier unique
    const timestamp = Date.now();
    const fileName = `${userId}/${chapterId}_${questionId}_${timestamp}.webm`;
    console.log(`üìÅ T√©l√©chargement du fichier audio vers ${AUDIO_BUCKET_NAME}/${fileName}...`);
    
    // T√©l√©chargement du fichier audio
    const { data, error } = await supabase.storage
      .from(AUDIO_BUCKET_NAME)
      .upload(fileName, blob, {
        contentType: 'audio/webm',
        cacheControl: '3600',
        upsert: true
      });
    
    if (error) {
      console.error('üí• Erreur de t√©l√©chargement Supabase:', error);
      throw new Error(`Erreur de t√©l√©chargement: ${error.message}`);
    }
    
    console.log('‚úÖ T√©l√©chargement r√©ussi, g√©n√©ration de l\'URL publique...');
    
    // G√©n√©rer l'URL publique au lieu d'une URL sign√©e pour l'usage initial
    const { data: publicUrlData } = supabase.storage
      .from(AUDIO_BUCKET_NAME)
      .getPublicUrl(fileName);
    
    if (!publicUrlData?.publicUrl) {
      throw new Error("Impossible de g√©n√©rer l'URL publique du fichier");
    }
    
    console.log('üîó URL publique obtenue:', publicUrlData.publicUrl);
    console.log('ü™£ Bucket utilis√© pour l\'URL:', AUDIO_BUCKET_NAME);
    
    safeCallback(onSuccess, publicUrlData.publicUrl);
  } catch (error: any) {
    console.error('üí• Erreur lors du t√©l√©chargement audio:', error);
    
    let errorMessage = "Impossible de sauvegarder l'enregistrement audio.";
    if (error.message) {
      errorMessage += ` D√©tail: ${error.message}`;
    }
    
    safeCallback(onError, errorMessage);
  } finally {
    console.log(`üèÅ Fin du processus de t√©l√©chargement pour la question ${questionId}`);
    safeCallback(onUploadEnd);
  }
};

/**
 * Supprime un fichier audio de Supabase Storage
 */
export const deleteAudio = async (
  audioUrl: string,
  onSuccess: () => void,
  onError: (message: string) => void
): Promise<void> => {
  if (!audioUrl) {
    console.log('‚ùå URL audio vide pour suppression');
    safeCallback(onError, "URL audio non valide");
    return;
  }
  
  try {
    console.log('üóëÔ∏è Tentative de suppression du fichier audio:', audioUrl);
    
    // Extraction du chemin du fichier √† partir de l'URL
    const filePath = extractFilePathFromUrl(audioUrl);
    
    if (!filePath) {
      console.error('‚ùå Impossible d\'extraire le chemin depuis l\'URL:', audioUrl);
      throw new Error('Format d\'URL non reconnu');
    }
    
    console.log(`üóÇÔ∏è Suppression du fichier ${filePath} du bucket ${AUDIO_BUCKET_NAME}...`);
    
    // Suppression du fichier
    const { error } = await supabase.storage
      .from(AUDIO_BUCKET_NAME)
      .remove([filePath]);
    
    if (error) {
      console.error('üí• Erreur lors de la suppression:', error);
      throw error;
    }
    
    console.log('‚úÖ Fichier supprim√© avec succ√®s');
    safeCallback(onSuccess);
  } catch (error: any) {
    console.error('üí• Erreur lors de la suppression:', error);
    safeCallback(onError, `Impossible de supprimer l'audio. ${error.message || ''}`);
  }
};
