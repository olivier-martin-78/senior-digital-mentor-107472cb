
import heic2any from 'heic2any';

export const isHeicFile = (file: File): boolean => {
  const hasHeicType = file.type === 'image/heic' || file.type === 'image/heif';
  const hasHeicExtension = file.name.toLowerCase().endsWith('.heic') || file.name.toLowerCase().endsWith('.heif');
  
  console.log('üîç D√©tection HEIC:', {
    fileName: file.name,
    fileType: file.type,
    fileSize: file.size,
    hasHeicType,
    hasHeicExtension,
    isHeic: hasHeicType || hasHeicExtension
  });
  
  return hasHeicType || hasHeicExtension;
};

export const convertHeicToJpeg = async (file: File): Promise<File> => {
  try {
    console.log('üîÑ D√©but conversion HEIC:', {
      name: file.name,
      type: file.type,
      size: file.size,
      lastModified: file.lastModified
    });
    
    // V√©rifications pr√©liminaires
    if (!file || file.size === 0) {
      throw new Error('Le fichier est vide ou invalide');
    }

    if (file.size > 50 * 1024 * 1024) {
      throw new Error('Le fichier est trop volumineux (max 50MB)');
    }

    console.log('üì± Lancement de la conversion HEIC...');
    
    // Tentatives multiples avec diff√©rents param√®tres pour les captures iPhone
    let convertedBlob;
    
    try {
      // Premi√®re tentative : JPEG avec qualit√© optimis√©e pour iPhone
      console.log('üîÑ Tentative 1: Conversion en JPEG qualit√© 0.9');
      convertedBlob = await heic2any({
        blob: file,
        toType: 'image/jpeg',
        quality: 0.9,
      });
    } catch (firstError) {
      console.log('‚ö†Ô∏è Tentative 1 √©chou√©e, essai avec qualit√© r√©duite');
      
      try {
        // Deuxi√®me tentative : JPEG avec qualit√© plus basse
        console.log('üîÑ Tentative 2: Conversion en JPEG qualit√© 0.7');
        convertedBlob = await heic2any({
          blob: file,
          toType: 'image/jpeg',
          quality: 0.7,
        });
      } catch (secondError) {
        console.log('‚ö†Ô∏è Tentative 2 √©chou√©e, essai en PNG');
        
        try {
          // Troisi√®me tentative : PNG (sans compression)
          console.log('üîÑ Tentative 3: Conversion en PNG');
          convertedBlob = await heic2any({
            blob: file,
            toType: 'image/png',
          });
        } catch (thirdError) {
          console.log('‚ö†Ô∏è Tentative 3 √©chou√©e, essai avec param√®tres de base');
          
          try {
            // Quatri√®me tentative : param√®tres minimaux
            console.log('üîÑ Tentative 4: Conversion avec param√®tres minimaux');
            convertedBlob = await heic2any({
              blob: file,
              toType: 'image/jpeg',
            });
          } catch (fourthError) {
            console.error('‚ùå Toutes les tentatives de conversion ont √©chou√©');
            console.error('Erreur finale:', fourthError);
            throw new Error('Impossible de convertir ce fichier HEIC. Le fichier pourrait √™tre corrompu ou dans un format HEIC non standard. Essayez de sauvegarder l\'image en JPEG depuis l\'iPhone (R√©glages > Appareil photo > Formats > "Plus compatible").');
          }
        }
      }
    }
    
    console.log('‚úÖ Conversion HEIC r√©ussie:', {
      resultType: typeof convertedBlob,
      isArray: Array.isArray(convertedBlob),
      blobSize: Array.isArray(convertedBlob) ? convertedBlob[0]?.size : convertedBlob?.size
    });
    
    // Gestion du r√©sultat de la conversion
    const blob = Array.isArray(convertedBlob) ? convertedBlob[0] : convertedBlob;
    
    if (!blob || !(blob instanceof Blob)) {
      console.error('‚ùå Blob invalide apr√®s conversion:', typeof blob);
      throw new Error('La conversion a √©chou√© - r√©sultat invalide');
    }
    
    // Cr√©ation du fichier converti
    const originalName = file.name.replace(/\.(heic|heif)$/i, '');
    const fileExtension = blob.type === 'image/png' ? '.png' : '.jpg';
    const convertedFile = new File(
      [blob], 
      `${originalName}${fileExtension}`, 
      { 
        type: blob.type,
        lastModified: Date.now()
      }
    );
    
    console.log('üéØ Fichier HEIC converti avec succ√®s:', {
      originalName: file.name,
      originalSize: file.size,
      originalType: file.type,
      convertedName: convertedFile.name,
      convertedSize: convertedFile.size,
      convertedType: convertedFile.type
    });
    
    return convertedFile;
  } catch (error) {
    console.error('üí• Erreur lors de la conversion HEIC:', {
      errorName: error?.name || 'Unknown',
      errorMessage: error?.message || 'Unknown error',
      fileName: file?.name,
      fileSize: file?.size,
      fileType: file?.type,
      stack: error?.stack
    });
    
    // Messages d'erreur plus sp√©cifiques bas√©s sur le type d'erreur
    if (error instanceof Error) {
      const errorMsg = error.message.toLowerCase();
      
      if (errorMsg.includes('network') || errorMsg.includes('fetch') || errorMsg.includes('load')) {
        throw new Error('Erreur de chargement de la librairie de conversion. V√©rifiez votre connexion internet.');
      }
      
      if (errorMsg.includes('memory') || errorMsg.includes('heap') || errorMsg.includes('quota')) {
        throw new Error('Le fichier est trop volumineux pour √™tre trait√©. Essayez avec une image plus petite.');
      }
      
      if (errorMsg.includes('format') || errorMsg.includes('invalid') || errorMsg.includes('corrupt')) {
        throw new Error('Le format du fichier n\'est pas valide. Essayez d\'enregistrer l\'image en JPEG depuis l\'iPhone.');
      }
      
      if (errorMsg.includes('timeout')) {
        throw new Error('La conversion a pris trop de temps. Essayez avec un fichier plus petit.');
      }
      
      // Pour les erreurs de conversion HEIC sp√©cifiques
      if (errorMsg.includes('heic') || errorMsg.includes('unable') || errorMsg.includes('failed')) {
        throw new Error('Ce fichier HEIC ne peut pas √™tre converti. Sur iPhone, activez "Plus compatible" dans R√©glages > Appareil photo > Formats pour prendre des photos en JPEG.');
      }
    }
    
    // Erreur g√©n√©rique avec conseil sp√©cifique iPhone
    throw new Error('Impossible de convertir le fichier HEIC. Sur iPhone, essayez de changer le format dans R√©glages > Appareil photo > Formats > "Plus compatible" pour prendre des photos en JPEG.');
  }
};

export const processImageFile = async (file: File): Promise<File> => {
  console.log('üîç Traitement du fichier:', {
    name: file.name,
    type: file.type,
    size: Math.round(file.size / 1024) + 'KB',
    isHeicDetected: isHeicFile(file)
  });
  
  // V√©rification de base
  if (!file) {
    throw new Error('Aucun fichier s√©lectionn√©');
  }
  
  // Pour les fichiers HEIC, essayer une approche alternative si la conversion √©choue
  if (isHeicFile(file)) {
    console.log('üì± Fichier HEIC d√©tect√©, conversion n√©cessaire');
    try {
      const convertedFile = await convertHeicToJpeg(file);
      console.log('‚úÖ Conversion HEIC termin√©e avec succ√®s');
      return convertedFile;
    } catch (conversionError) {
      console.error('‚ùå √âchec de la conversion HEIC:', conversionError?.message || 'Erreur inconnue');
      
      // Fallback : sugg√©rer √† l'utilisateur de changer le format depuis l'iPhone
      throw new Error('Impossible de convertir le fichier HEIC. Le fichier pourrait √™tre corrompu ou dans un format non support√©. Pour √©viter ce probl√®me, activez "Plus compatible" dans R√©glages > Appareil photo > Formats sur votre iPhone.');
    }
  }
  
  console.log('‚úÖ Fichier standard, aucune conversion n√©cessaire');
  return file;
};
